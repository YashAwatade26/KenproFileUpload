package com.kenpro.controller;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.kenpro.customvalidations.CustomDateValidator;
import com.kenpro.requestDTO.FileDetailsDTO;
import com.kenpro.requestDTO.UploadRequestDTO;
import com.kenpro.service.FileService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/docs")
@CrossOrigin("*")
public class FileController {
	@Autowired
	FileService fileService;
	
	@PostMapping("/upload")
	public ResponseEntity<String> uploadFiles(
	        @RequestParam("files") List<MultipartFile> files,
	        @RequestParam("receivedFrom") List<String> receivedFrom,
	        @RequestParam("receivedDateTime")  List<LocalDateTime> receivedDateTime,
	        @RequestParam("modifiedDateTime")  List<LocalDateTime> modifiedDateTime,
	        @RequestParam("description")List<String>description
	        )
	{
		  if (files.size() != receivedFrom.size() ||
		            files.size() != receivedDateTime.size() ||
		            files.size() != modifiedDateTime.size() ||
		            files.size() != description.size()) {
		            throw new RuntimeException("Mismatch -> Files count and Metadata count do not match!");
		        }

		fileService.saveDocuments(files, receivedFrom, receivedDateTime,modifiedDateTime,description);
	    return ResponseEntity.ok("Documents saved successfully.");
	}
	
	
	@GetMapping("/all")
	public ResponseEntity<Page<FileDetailsDTO>> getAllFiles(
	        @RequestParam(defaultValue = "0") int page,
	        @RequestParam(defaultValue = "5") int size) 
	{

	    Page<FileDetailsDTO> filePage = fileService.getAllFileDetails(page, size);
	    return ResponseEntity.ok(filePage);
	}
	
	 @DeleteMapping("remove/{id}")
	    public ResponseEntity<String> softDeleteFile(@PathVariable Long id) {
	        fileService.softDeleteFile(id);
	        return ResponseEntity.ok("File marked as deleted.");
	    }
	 
	 @GetMapping("/deleted")
	    public ResponseEntity<Page<FileDetailsDTO>> getDeletedFiles(
	            @RequestParam(defaultValue = "0") int page,
	            @RequestParam(defaultValue = "5") int size) {
	        Page<FileDetailsDTO> deletedFiles = fileService.getDeletedFiles(page, size);
	        return ResponseEntity.ok(deletedFiles);
	    }
	 
	 
//	public ResponseEntity<?> uploadFiles(
//            @RequestPart("files") List<MultipartFile> files, 
//            @Valid @ModelAttribute UploadRequestDTO requestDTO
//    ) {
//        if (files.size() != requestDTO.getReceivedFrom().size()) {
//            throw new RuntimeException("Mismatch: Files count and Metadata count do not match!");
//        }
//
//        fileService.saveDocuments(files, requestDTO.getReceivedFrom(), 
//                                  requestDTO.getReceivedDateTime(), 
//                                  requestDTO.getModifiedDateTime(), 
//                                  requestDTO.getDescription());
//        return ResponseEntity.ok().build();
//    }
	
	
}
