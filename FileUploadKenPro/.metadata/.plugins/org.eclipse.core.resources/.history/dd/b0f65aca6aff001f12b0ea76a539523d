package com.kenpro.service;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.kenpro.pojos.FileDetails;
import com.kenpro.repository.FileRepository;

import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class FileServiceImpl implements FileService{

	@Autowired
	FileRepository fileRepository;

	public List<FileDetails> saveDocuments(List<MultipartFile> files, List<String> receivedFromList, List<LocalDateTime> receivedDateTimeList) {
        List<FileDetails> savedDocs = files.stream().map(file -> {
            try {
                int index = files.indexOf(file);
                FileDetails fileDetails = new FileDetails();
                fileDetails.setDocumentName(file.getOriginalFilename());
                fileDetails.setDocumentType(file.getContentType());
               // fileDetails.setFileSize(file.getSize());
                
                fileDetails.setFileData(file.getBytes());
                fileDetails.setReceivedFrom(receivedFromList.get(index));
             //   fileDetails.setReceivedDateTime(receivedDateTimeList.get(index));
                fileDetails.setReceivedDate(receivedDateTimeList.get(index));
                return fileRepository.save(fileDetails);
            } catch (IOException e) {
                throw new RuntimeException("Error saving file: " + file.getOriginalFilename(), e);
            }
        }).collect(Collectors.toList());

        return savedDocs;
    }

    public List<FileDetails> getAllFileDetailss() {
        return fileRepository.findAll();
    }

    public Optional<FileDetails> getFileDetailsById(Long id) {
        return fileRepository.findById(id);
    }

    public void deleteFileDetails(Long id) {
        fileRepository.deleteById(id);
    }
}


