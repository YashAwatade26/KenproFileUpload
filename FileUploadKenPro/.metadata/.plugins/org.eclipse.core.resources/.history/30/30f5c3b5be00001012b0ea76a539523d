package com.kenpro.controller;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.kenpro.customvalidations.CustomDateValidator;
import com.kenpro.pojos.FileDetails;
import com.kenpro.requestDTO.FileDetailsDTO;
import com.kenpro.requestDTO.UploadRequestDTO;
import com.kenpro.service.FileService;

import co.kenpro.exceptions.ApiResponseData;
import co.kenpro.exceptions.MetaDataMismatchException;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/docs")
@CrossOrigin("*")
public class FileController {
	@Autowired
	FileService fileService;
	
	@PostMapping("/upload")
	public ResponseEntity<ApiResponseData<String>> uploadFiles(
	        @RequestParam("files") List<MultipartFile> files,
	        @RequestParam("receivedFrom") List<String> receivedFrom,
	        @RequestParam("receivedDateTime")  List<LocalDateTime> receivedDateTime,
	        @RequestParam("modifiedDateTime")  List<LocalDateTime> modifiedDateTime,
	        @RequestParam("description")List<String>description
	        )
	{
		  if (files.size() != receivedFrom.size() ||
		            files.size() != receivedDateTime.size() ||
		            files.size() != modifiedDateTime.size() ||
		            files.size() != description.size()) {
		            throw new MetaDataMismatchException("Mismatch -> Files count and Metadata count do not match!");
		        }

		fileService.saveDocuments(files, receivedFrom, receivedDateTime,modifiedDateTime,description);
	    return ResponseEntity.ok(new ApiResponseData<>("success","Data Saved Successfully"));
	}
	
	
	@GetMapping("/all")
	public ResponseEntity<ApiResponseData<Page<FileDetailsDTO>>> getAllFiles(
	        @RequestParam(defaultValue = "0") int page,
	        @RequestParam(defaultValue = "5") int size) 
	{

	    Page<FileDetailsDTO> filePage = fileService.getAllFileDetails(page, size);
	    return ResponseEntity.ok(new ApiResponseData<>("success", filePage));
	}
	
	 @DeleteMapping("remove/{id}")
	    public ResponseEntity<ApiResponseData<String>> softDeleteFile(@PathVariable Long id) {
	        fileService.softDeleteFile(id);
	        return ResponseEntity.ok(new ApiResponseData<>("success","File marked as deleted."));
	    }
	 
	 @GetMapping("/deleted")
	    public ResponseEntity<ApiResponseData<Page<FileDetailsDTO>>> getDeletedFiles(
	            @RequestParam(defaultValue = "0") int page,
	            @RequestParam(defaultValue = "5") int size) {
	        Page<FileDetailsDTO> deletedFiles = fileService.getDeletedFiles(page, size);
	        return ResponseEntity.ok(new ApiResponseData<>("success",deletedFiles));
	    }
	 
	 @GetMapping("/{id}/download")
	    public ResponseEntity<byte[]> downloadFile(@PathVariable Long id) {
	        FileDetails file = fileService.getFileDetailsById(id);

	        return ResponseEntity.ok()
	                .contentType(MediaType.APPLICATION_OCTET_STREAM)
	                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + file.getDocumentName() + "\"")
	                .body(file.getFileData());
	    }
	 

	
	
}
